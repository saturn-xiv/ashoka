// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hardware.proto

#include "hardware.pb.h"
#include "hardware.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ashoka {
namespace hardware {

static const char* Listener_method_names[] = {
  "/ashoka.hardware.Listener/Tty",
  "/ashoka.hardware.Listener/Tts",
  "/ashoka.hardware.Listener/Led",
  "/ashoka.hardware.Listener/PlayAudio",
  "/ashoka.hardware.Listener/PauseAudio",
};

std::unique_ptr< Listener::Stub> Listener::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Listener::Stub> stub(new Listener::Stub(channel));
  return stub;
}

Listener::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Tty_(Listener_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tts_(Listener_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Led_(Listener_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayAudio_(Listener_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseAudio_(Listener_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Listener::Stub::Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::ashoka::hardware::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tty_, context, request, response);
}

void Listener::Stub::experimental_async::Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tty_, context, request, response, std::move(f));
}

void Listener::Stub::experimental_async::Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::PrepareAsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ashoka::hardware::Response>::Create(channel_.get(), cq, rpcmethod_Tty_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::AsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTtyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Listener::Stub::Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::ashoka::hardware::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tts_, context, request, response);
}

void Listener::Stub::experimental_async::Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tts_, context, request, response, std::move(f));
}

void Listener::Stub::experimental_async::Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::PrepareAsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ashoka::hardware::Response>::Create(channel_.get(), cq, rpcmethod_Tts_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::AsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTtsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Listener::Stub::Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::ashoka::hardware::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Led_, context, request, response);
}

void Listener::Stub::experimental_async::Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Led_, context, request, response, std::move(f));
}

void Listener::Stub::experimental_async::Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Led_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::PrepareAsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ashoka::hardware::Response>::Create(channel_.get(), cq, rpcmethod_Led_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::AsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Listener::Stub::PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::ashoka::hardware::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayAudio_, context, request, response);
}

void Listener::Stub::experimental_async::PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayAudio_, context, request, response, std::move(f));
}

void Listener::Stub::experimental_async::PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayAudio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::PrepareAsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ashoka::hardware::Response>::Create(channel_.get(), cq, rpcmethod_PlayAudio_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::AsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayAudioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Listener::Stub::PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ashoka::hardware::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseAudio_, context, request, response);
}

void Listener::Stub::experimental_async::PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseAudio_, context, request, response, std::move(f));
}

void Listener::Stub::experimental_async::PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseAudio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::PrepareAsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ashoka::hardware::Response>::Create(channel_.get(), cq, rpcmethod_PauseAudio_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* Listener::Stub::AsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseAudioRaw(context, request, cq);
  result->StartCall();
  return result;
}

Listener::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Listener_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Listener::Service, ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>(
          [](Listener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ashoka::hardware::TtyRequest* req,
             ::ashoka::hardware::Response* resp) {
               return service->Tty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Listener_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Listener::Service, ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>(
          [](Listener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ashoka::hardware::TtsRequest* req,
             ::ashoka::hardware::Response* resp) {
               return service->Tts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Listener_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Listener::Service, ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>(
          [](Listener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ashoka::hardware::LedRequest* req,
             ::ashoka::hardware::Response* resp) {
               return service->Led(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Listener_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Listener::Service, ::ashoka::hardware::Audio, ::ashoka::hardware::Response>(
          [](Listener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ashoka::hardware::Audio* req,
             ::ashoka::hardware::Response* resp) {
               return service->PlayAudio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Listener_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Listener::Service, ::google::protobuf::Empty, ::ashoka::hardware::Response>(
          [](Listener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::ashoka::hardware::Response* resp) {
               return service->PauseAudio(ctx, req, resp);
             }, this)));
}

Listener::Service::~Service() {
}

::grpc::Status Listener::Service::Tty(::grpc::ServerContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Listener::Service::Tts(::grpc::ServerContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Listener::Service::Led(::grpc::ServerContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Listener::Service::PlayAudio(::grpc::ServerContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Listener::Service::PauseAudio(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ashoka
}  // namespace hardware

