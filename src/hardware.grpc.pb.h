// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hardware.proto
#ifndef GRPC_hardware_2eproto__INCLUDED
#define GRPC_hardware_2eproto__INCLUDED

#include "hardware.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ashoka {
namespace hardware {

class Listener final {
 public:
  static constexpr char const* service_full_name() {
    return "ashoka.hardware.Listener";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::ashoka::hardware::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> AsyncTty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(AsyncTtyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> PrepareAsyncTty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(PrepareAsyncTtyRaw(context, request, cq));
    }
    virtual ::grpc::Status Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::ashoka::hardware::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> AsyncTts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(AsyncTtsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> PrepareAsyncTts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(PrepareAsyncTtsRaw(context, request, cq));
    }
    virtual ::grpc::Status Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::ashoka::hardware::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> AsyncLed(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(AsyncLedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> PrepareAsyncLed(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(PrepareAsyncLedRaw(context, request, cq));
    }
    virtual ::grpc::Status PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::ashoka::hardware::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> AsyncPlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(AsyncPlayAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> PrepareAsyncPlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(PrepareAsyncPlayAudioRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ashoka::hardware::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> AsyncPauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(AsyncPauseAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>> PrepareAsyncPauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>>(PrepareAsyncPauseAudioRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* AsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* PrepareAsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* AsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* PrepareAsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* AsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* PrepareAsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* AsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* PrepareAsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* AsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ashoka::hardware::Response>* PrepareAsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::ashoka::hardware::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> AsyncTty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(AsyncTtyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> PrepareAsyncTty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(PrepareAsyncTtyRaw(context, request, cq));
    }
    ::grpc::Status Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::ashoka::hardware::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> AsyncTts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(AsyncTtsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> PrepareAsyncTts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(PrepareAsyncTtsRaw(context, request, cq));
    }
    ::grpc::Status Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::ashoka::hardware::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> AsyncLed(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(AsyncLedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> PrepareAsyncLed(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(PrepareAsyncLedRaw(context, request, cq));
    }
    ::grpc::Status PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::ashoka::hardware::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> AsyncPlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(AsyncPlayAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> PrepareAsyncPlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(PrepareAsyncPlayAudioRaw(context, request, cq));
    }
    ::grpc::Status PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ashoka::hardware::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> AsyncPauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(AsyncPauseAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>> PrepareAsyncPauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>>(PrepareAsyncPauseAudioRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tty(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tts(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Led(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PlayAudio(::grpc::ClientContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PauseAudio(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* AsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* PrepareAsyncTtyRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* AsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* PrepareAsyncTtsRaw(::grpc::ClientContext* context, const ::ashoka::hardware::TtsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* AsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* PrepareAsyncLedRaw(::grpc::ClientContext* context, const ::ashoka::hardware::LedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* AsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* PrepareAsyncPlayAudioRaw(::grpc::ClientContext* context, const ::ashoka::hardware::Audio& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* AsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ashoka::hardware::Response>* PrepareAsyncPauseAudioRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Tty_;
    const ::grpc::internal::RpcMethod rpcmethod_Tts_;
    const ::grpc::internal::RpcMethod rpcmethod_Led_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseAudio_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Tty(::grpc::ServerContext* context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response);
    virtual ::grpc::Status Tts(::grpc::ServerContext* context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response);
    virtual ::grpc::Status Led(::grpc::ServerContext* context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response);
    virtual ::grpc::Status PlayAudio(::grpc::ServerContext* context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response);
    virtual ::grpc::Status PauseAudio(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tty() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTty(::grpc::ServerContext* context, ::ashoka::hardware::TtyRequest* request, ::grpc::ServerAsyncResponseWriter< ::ashoka::hardware::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTts(::grpc::ServerContext* context, ::ashoka::hardware::TtsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ashoka::hardware::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Led() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLed(::grpc::ServerContext* context, ::ashoka::hardware::LedRequest* request, ::grpc::ServerAsyncResponseWriter< ::ashoka::hardware::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlayAudio() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayAudio(::grpc::ServerContext* context, ::ashoka::hardware::Audio* request, ::grpc::ServerAsyncResponseWriter< ::ashoka::hardware::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseAudio() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseAudio(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ashoka::hardware::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Tty<WithAsyncMethod_Tts<WithAsyncMethod_Led<WithAsyncMethod_PlayAudio<WithAsyncMethod_PauseAudio<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tty() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ashoka::hardware::TtyRequest* request, ::ashoka::hardware::Response* response) { return this->Tty(context, request, response); }));}
    void SetMessageAllocatorFor_Tty(
        ::grpc::experimental::MessageAllocator< ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tty(
      ::grpc::CallbackServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tty(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ashoka::hardware::TtsRequest* request, ::ashoka::hardware::Response* response) { return this->Tts(context, request, response); }));}
    void SetMessageAllocatorFor_Tts(
        ::grpc::experimental::MessageAllocator< ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tts(
      ::grpc::CallbackServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Led() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ashoka::hardware::LedRequest* request, ::ashoka::hardware::Response* response) { return this->Led(context, request, response); }));}
    void SetMessageAllocatorFor_Led(
        ::grpc::experimental::MessageAllocator< ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Led(
      ::grpc::CallbackServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Led(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PlayAudio() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::Audio, ::ashoka::hardware::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ashoka::hardware::Audio* request, ::ashoka::hardware::Response* response) { return this->PlayAudio(context, request, response); }));}
    void SetMessageAllocatorFor_PlayAudio(
        ::grpc::experimental::MessageAllocator< ::ashoka::hardware::Audio, ::ashoka::hardware::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ashoka::hardware::Audio, ::ashoka::hardware::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PlayAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PlayAudio(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PauseAudio() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ashoka::hardware::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::ashoka::hardware::Response* response) { return this->PauseAudio(context, request, response); }));}
    void SetMessageAllocatorFor_PauseAudio(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::ashoka::hardware::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::ashoka::hardware::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseAudio(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Tty<ExperimentalWithCallbackMethod_Tts<ExperimentalWithCallbackMethod_Led<ExperimentalWithCallbackMethod_PlayAudio<ExperimentalWithCallbackMethod_PauseAudio<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Tty<ExperimentalWithCallbackMethod_Tts<ExperimentalWithCallbackMethod_Led<ExperimentalWithCallbackMethod_PlayAudio<ExperimentalWithCallbackMethod_PauseAudio<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tty() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Led() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlayAudio() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseAudio() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tty() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTty(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Led() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlayAudio() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseAudio() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tty() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tty(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tty(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tty(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Led() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Led(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Led(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Led(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PlayAudio() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlayAudio(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PlayAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PlayAudio(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PauseAudio() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseAudio(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseAudio(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tty() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ashoka::hardware::TtyRequest, ::ashoka::hardware::Response>* streamer) {
                       return this->StreamedTty(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tty(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtyRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTty(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ashoka::hardware::TtyRequest,::ashoka::hardware::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ashoka::hardware::TtsRequest, ::ashoka::hardware::Response>* streamer) {
                       return this->StreamedTts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tts(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::TtsRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ashoka::hardware::TtsRequest,::ashoka::hardware::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Led : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Led() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ashoka::hardware::LedRequest, ::ashoka::hardware::Response>* streamer) {
                       return this->StreamedLed(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Led() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Led(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::LedRequest* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ashoka::hardware::LedRequest,::ashoka::hardware::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlayAudio() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ashoka::hardware::Audio, ::ashoka::hardware::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ashoka::hardware::Audio, ::ashoka::hardware::Response>* streamer) {
                       return this->StreamedPlayAudio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlayAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayAudio(::grpc::ServerContext* /*context*/, const ::ashoka::hardware::Audio* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayAudio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ashoka::hardware::Audio,::ashoka::hardware::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseAudio() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::ashoka::hardware::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::ashoka::hardware::Response>* streamer) {
                       return this->StreamedPauseAudio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PauseAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseAudio(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::ashoka::hardware::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseAudio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::ashoka::hardware::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Tty<WithStreamedUnaryMethod_Tts<WithStreamedUnaryMethod_Led<WithStreamedUnaryMethod_PlayAudio<WithStreamedUnaryMethod_PauseAudio<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Tty<WithStreamedUnaryMethod_Tts<WithStreamedUnaryMethod_Led<WithStreamedUnaryMethod_PlayAudio<WithStreamedUnaryMethod_PauseAudio<Service > > > > > StreamedService;
};

}  // namespace hardware
}  // namespace ashoka


#endif  // GRPC_hardware_2eproto__INCLUDED
