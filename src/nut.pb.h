// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nut.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nut_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nut_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nut_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nut_2eproto;
namespace ashoka {
namespace nut {
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
}  // namespace nut
}  // namespace ashoka
PROTOBUF_NAMESPACE_OPEN
template<> ::ashoka::nut::Email* Arena::CreateMaybeMessage<::ashoka::nut::Email>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ashoka {
namespace nut {

enum ContentType : int {
  TEXT = 0,
  HTML = 1,
  MARKDOWN = 2,
  ContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ContentType_IsValid(int value);
constexpr ContentType ContentType_MIN = TEXT;
constexpr ContentType ContentType_MAX = MARKDOWN;
constexpr int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor();
template<typename T>
inline const std::string& ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContentType_descriptor(), enum_t_value);
}
inline bool ContentType_Parse(
    const std::string& name, ContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContentType>(
    ContentType_descriptor(), name, value);
}
// ===================================================================

class Email PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ashoka.nut.Email) */ {
 public:
  inline Email() : Email(nullptr) {};
  virtual ~Email();

  Email(const Email& from);
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  inline Email& operator=(Email&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }
  inline void Swap(Email* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Email* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(nullptr);
  }

  Email* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ashoka.nut.Email";
  }
  protected:
  explicit Email(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nut_2eproto);
    return ::descriptor_table_nut_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 4,
    kBccFieldNumber = 5,
    kIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kSubjectFieldNumber = 6,
    kBodyFieldNumber = 8,
    kContentTypeFieldNumber = 7,
  };
  // repeated string cc = 4;
  int cc_size() const;
  private:
  int _internal_cc_size() const;
  public:
  void clear_cc();
  const std::string& cc(int index) const;
  std::string* mutable_cc(int index);
  void set_cc(int index, const std::string& value);
  void set_cc(int index, std::string&& value);
  void set_cc(int index, const char* value);
  void set_cc(int index, const char* value, size_t size);
  std::string* add_cc();
  void add_cc(const std::string& value);
  void add_cc(std::string&& value);
  void add_cc(const char* value);
  void add_cc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cc();
  private:
  const std::string& _internal_cc(int index) const;
  std::string* _internal_add_cc();
  public:

  // repeated string bcc = 5;
  int bcc_size() const;
  private:
  int _internal_bcc_size() const;
  public:
  void clear_bcc();
  const std::string& bcc(int index) const;
  std::string* mutable_bcc(int index);
  void set_bcc(int index, const std::string& value);
  void set_bcc(int index, std::string&& value);
  void set_bcc(int index, const char* value);
  void set_bcc(int index, const char* value, size_t size);
  std::string* add_bcc();
  void add_bcc(const std::string& value);
  void add_bcc(std::string&& value);
  void add_bcc(const char* value);
  void add_bcc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bcc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bcc();
  private:
  const std::string& _internal_bcc(int index) const;
  std::string* _internal_add_bcc();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_to();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_to(
      std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string subject = 6;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subject();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subject(
      std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 8;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .ashoka.nut.ContentType content_type = 7;
  void clear_content_type();
  ::ashoka::nut::ContentType content_type() const;
  void set_content_type(::ashoka::nut::ContentType value);
  private:
  ::ashoka::nut::ContentType _internal_content_type() const;
  void _internal_set_content_type(::ashoka::nut::ContentType value);
  public:

  // @@protoc_insertion_point(class_scope:ashoka.nut.Email)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nut_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Email

// string id = 1;
inline void Email::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::id() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.id)
  return _internal_id();
}
inline void Email::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.id)
}
inline std::string* Email::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.id)
  return _internal_mutable_id();
}
inline const std::string& Email::_internal_id() const {
  return id_.Get();
}
inline void Email::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ashoka.nut.Email.id)
}
inline void Email::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.id)
}
inline void Email::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.id)
}
inline std::string* Email::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_id() {
  // @@protoc_insertion_point(field_release:ashoka.nut.Email.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ashoka.nut.Email.id)
}
inline std::string* Email::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ashoka.nut.Email.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Email::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ashoka.nut.Email.id)
}

// string from = 2;
inline void Email::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::from() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.from)
  return _internal_from();
}
inline void Email::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.from)
}
inline std::string* Email::mutable_from() {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.from)
  return _internal_mutable_from();
}
inline const std::string& Email::_internal_from() const {
  return from_.Get();
}
inline void Email::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ashoka.nut.Email.from)
}
inline void Email::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.from)
}
inline void Email::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.from)
}
inline std::string* Email::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_from() {
  // @@protoc_insertion_point(field_release:ashoka.nut.Email.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ashoka.nut.Email.from)
}
inline std::string* Email::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ashoka.nut.Email.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Email::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ashoka.nut.Email.from)
}

// string to = 3;
inline void Email::clear_to() {
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::to() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.to)
  return _internal_to();
}
inline void Email::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.to)
}
inline std::string* Email::mutable_to() {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.to)
  return _internal_mutable_to();
}
inline const std::string& Email::_internal_to() const {
  return to_.Get();
}
inline void Email::_internal_set_to(const std::string& value) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_to(std::string&& value) {
  
  to_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ashoka.nut.Email.to)
}
inline void Email::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.to)
}
inline void Email::set_to(const char* value,
    size_t size) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.to)
}
inline std::string* Email::_internal_mutable_to() {
  
  return to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_to() {
  // @@protoc_insertion_point(field_release:ashoka.nut.Email.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ashoka.nut.Email.to)
}
inline std::string* Email::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ashoka.nut.Email.to)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return to_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Email::unsafe_arena_set_allocated_to(
    std::string* to) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (to != nullptr) {
    
  } else {
    
  }
  to_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      to, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ashoka.nut.Email.to)
}

// repeated string cc = 4;
inline int Email::_internal_cc_size() const {
  return cc_.size();
}
inline int Email::cc_size() const {
  return _internal_cc_size();
}
inline void Email::clear_cc() {
  cc_.Clear();
}
inline std::string* Email::add_cc() {
  // @@protoc_insertion_point(field_add_mutable:ashoka.nut.Email.cc)
  return _internal_add_cc();
}
inline const std::string& Email::_internal_cc(int index) const {
  return cc_.Get(index);
}
inline const std::string& Email::cc(int index) const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.cc)
  return _internal_cc(index);
}
inline std::string* Email::mutable_cc(int index) {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.cc)
  return cc_.Mutable(index);
}
inline void Email::set_cc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.cc)
  cc_.Mutable(index)->assign(value);
}
inline void Email::set_cc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.cc)
  cc_.Mutable(index)->assign(std::move(value));
}
inline void Email::set_cc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.cc)
}
inline void Email::set_cc(int index, const char* value, size_t size) {
  cc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.cc)
}
inline std::string* Email::_internal_add_cc() {
  return cc_.Add();
}
inline void Email::add_cc(const std::string& value) {
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ashoka.nut.Email.cc)
}
inline void Email::add_cc(std::string&& value) {
  cc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ashoka.nut.Email.cc)
}
inline void Email::add_cc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ashoka.nut.Email.cc)
}
inline void Email::add_cc(const char* value, size_t size) {
  cc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ashoka.nut.Email.cc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Email::cc() const {
  // @@protoc_insertion_point(field_list:ashoka.nut.Email.cc)
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Email::mutable_cc() {
  // @@protoc_insertion_point(field_mutable_list:ashoka.nut.Email.cc)
  return &cc_;
}

// repeated string bcc = 5;
inline int Email::_internal_bcc_size() const {
  return bcc_.size();
}
inline int Email::bcc_size() const {
  return _internal_bcc_size();
}
inline void Email::clear_bcc() {
  bcc_.Clear();
}
inline std::string* Email::add_bcc() {
  // @@protoc_insertion_point(field_add_mutable:ashoka.nut.Email.bcc)
  return _internal_add_bcc();
}
inline const std::string& Email::_internal_bcc(int index) const {
  return bcc_.Get(index);
}
inline const std::string& Email::bcc(int index) const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.bcc)
  return _internal_bcc(index);
}
inline std::string* Email::mutable_bcc(int index) {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.bcc)
  return bcc_.Mutable(index);
}
inline void Email::set_bcc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.bcc)
  bcc_.Mutable(index)->assign(value);
}
inline void Email::set_bcc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.bcc)
  bcc_.Mutable(index)->assign(std::move(value));
}
inline void Email::set_bcc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.bcc)
}
inline void Email::set_bcc(int index, const char* value, size_t size) {
  bcc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.bcc)
}
inline std::string* Email::_internal_add_bcc() {
  return bcc_.Add();
}
inline void Email::add_bcc(const std::string& value) {
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ashoka.nut.Email.bcc)
}
inline void Email::add_bcc(std::string&& value) {
  bcc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ashoka.nut.Email.bcc)
}
inline void Email::add_bcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bcc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ashoka.nut.Email.bcc)
}
inline void Email::add_bcc(const char* value, size_t size) {
  bcc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ashoka.nut.Email.bcc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Email::bcc() const {
  // @@protoc_insertion_point(field_list:ashoka.nut.Email.bcc)
  return bcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Email::mutable_bcc() {
  // @@protoc_insertion_point(field_mutable_list:ashoka.nut.Email.bcc)
  return &bcc_;
}

// string subject = 6;
inline void Email::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::subject() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.subject)
  return _internal_subject();
}
inline void Email::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.subject)
}
inline std::string* Email::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.subject)
  return _internal_mutable_subject();
}
inline const std::string& Email::_internal_subject() const {
  return subject_.Get();
}
inline void Email::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ashoka.nut.Email.subject)
}
inline void Email::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.subject)
}
inline void Email::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.subject)
}
inline std::string* Email::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_subject() {
  // @@protoc_insertion_point(field_release:ashoka.nut.Email.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ashoka.nut.Email.subject)
}
inline std::string* Email::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ashoka.nut.Email.subject)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subject_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Email::unsafe_arena_set_allocated_subject(
    std::string* subject) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subject, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ashoka.nut.Email.subject)
}

// .ashoka.nut.ContentType content_type = 7;
inline void Email::clear_content_type() {
  content_type_ = 0;
}
inline ::ashoka::nut::ContentType Email::_internal_content_type() const {
  return static_cast< ::ashoka::nut::ContentType >(content_type_);
}
inline ::ashoka::nut::ContentType Email::content_type() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.content_type)
  return _internal_content_type();
}
inline void Email::_internal_set_content_type(::ashoka::nut::ContentType value) {
  
  content_type_ = value;
}
inline void Email::set_content_type(::ashoka::nut::ContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.content_type)
}

// string body = 8;
inline void Email::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Email::body() const {
  // @@protoc_insertion_point(field_get:ashoka.nut.Email.body)
  return _internal_body();
}
inline void Email::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:ashoka.nut.Email.body)
}
inline std::string* Email::mutable_body() {
  // @@protoc_insertion_point(field_mutable:ashoka.nut.Email.body)
  return _internal_mutable_body();
}
inline const std::string& Email::_internal_body() const {
  return body_.Get();
}
inline void Email::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Email::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ashoka.nut.Email.body)
}
inline void Email::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ashoka.nut.Email.body)
}
inline void Email::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ashoka.nut.Email.body)
}
inline std::string* Email::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Email::release_body() {
  // @@protoc_insertion_point(field_release:ashoka.nut.Email.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Email::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ashoka.nut.Email.body)
}
inline std::string* Email::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ashoka.nut.Email.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Email::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ashoka.nut.Email.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace nut
}  // namespace ashoka

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ashoka::nut::ContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ashoka::nut::ContentType>() {
  return ::ashoka::nut::ContentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nut_2eproto
