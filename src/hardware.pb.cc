// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware.proto

#include "hardware.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AudioRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioRequest_File_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioRequest_Stream_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsResponse_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtsRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtyRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TtyResponse_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoRequest_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRequest_File_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hardware_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRequest_Stream_hardware_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace ashoka {
namespace hardware {
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  const ::ashoka::hardware::TtyRequest* tty_;
  const ::ashoka::hardware::LedRequest* led_;
  const ::ashoka::hardware::SmsRequest* sms_;
  const ::ashoka::hardware::AudioRequest* audio_;
  const ::ashoka::hardware::VideoRequest* video_;
  const ::ashoka::hardware::TtsRequest* tts_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  const PROTOBUF_NAMESPACE_ID::Empty* empty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
} _Response_default_instance_;
class PublisherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Publisher> _instance;
  const ::ashoka::hardware::TtyResponse* tty_;
  const ::ashoka::hardware::SmsResponse* sms_;
} _Publisher_default_instance_;
class TtyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TtyRequest> _instance;
} _TtyRequest_default_instance_;
class TtyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TtyResponse> _instance;
} _TtyResponse_default_instance_;
class SmsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmsRequest> _instance;
} _SmsRequest_default_instance_;
class SmsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmsResponse> _instance;
} _SmsResponse_default_instance_;
class LedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedRequest> _instance;
} _LedRequest_default_instance_;
class TtsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TtsRequest> _instance;
} _TtsRequest_default_instance_;
class AudioRequest_StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioRequest_Stream> _instance;
} _AudioRequest_Stream_default_instance_;
class AudioRequest_FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioRequest_File> _instance;
} _AudioRequest_File_default_instance_;
class AudioRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioRequest> _instance;
} _AudioRequest_default_instance_;
class VideoRequest_StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoRequest_Stream> _instance;
} _VideoRequest_Stream_default_instance_;
class VideoRequest_FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoRequest_File> _instance;
} _VideoRequest_File_default_instance_;
class VideoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoRequest> _instance;
} _VideoRequest_default_instance_;
}  // namespace hardware
}  // namespace ashoka
static void InitDefaultsscc_info_AudioRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_AudioRequest_default_instance_;
    new (ptr) ::ashoka::hardware::AudioRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::AudioRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AudioRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AudioRequest_hardware_2eproto}, {
      &scc_info_AudioRequest_File_hardware_2eproto.base,
      &scc_info_AudioRequest_Stream_hardware_2eproto.base,}};

static void InitDefaultsscc_info_AudioRequest_File_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_AudioRequest_File_default_instance_;
    new (ptr) ::ashoka::hardware::AudioRequest_File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::AudioRequest_File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioRequest_File_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioRequest_File_hardware_2eproto}, {}};

static void InitDefaultsscc_info_AudioRequest_Stream_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_AudioRequest_Stream_default_instance_;
    new (ptr) ::ashoka::hardware::AudioRequest_Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::AudioRequest_Stream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioRequest_Stream_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioRequest_Stream_hardware_2eproto}, {}};

static void InitDefaultsscc_info_LedRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_LedRequest_default_instance_;
    new (ptr) ::ashoka::hardware::LedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::LedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LedRequest_hardware_2eproto}, {}};

static void InitDefaultsscc_info_Publisher_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_Publisher_default_instance_;
    new (ptr) ::ashoka::hardware::Publisher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::Publisher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Publisher_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Publisher_hardware_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_TtyResponse_hardware_2eproto.base,
      &scc_info_SmsResponse_hardware_2eproto.base,}};

static void InitDefaultsscc_info_Request_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_Request_default_instance_;
    new (ptr) ::ashoka::hardware::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Request_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Request_hardware_2eproto}, {
      &scc_info_TtyRequest_hardware_2eproto.base,
      &scc_info_LedRequest_hardware_2eproto.base,
      &scc_info_SmsRequest_hardware_2eproto.base,
      &scc_info_AudioRequest_hardware_2eproto.base,
      &scc_info_VideoRequest_hardware_2eproto.base,
      &scc_info_TtsRequest_hardware_2eproto.base,}};

static void InitDefaultsscc_info_Response_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_Response_default_instance_;
    new (ptr) ::ashoka::hardware::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Response_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Response_hardware_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsscc_info_SmsRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_SmsRequest_default_instance_;
    new (ptr) ::ashoka::hardware::SmsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::SmsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SmsRequest_hardware_2eproto}, {}};

static void InitDefaultsscc_info_SmsResponse_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_SmsResponse_default_instance_;
    new (ptr) ::ashoka::hardware::SmsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::SmsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsResponse_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SmsResponse_hardware_2eproto}, {}};

static void InitDefaultsscc_info_TtsRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_TtsRequest_default_instance_;
    new (ptr) ::ashoka::hardware::TtsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::TtsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtsRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TtsRequest_hardware_2eproto}, {}};

static void InitDefaultsscc_info_TtyRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_TtyRequest_default_instance_;
    new (ptr) ::ashoka::hardware::TtyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::TtyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TtyRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TtyRequest_hardware_2eproto}, {}};

static void InitDefaultsscc_info_TtyResponse_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_TtyResponse_default_instance_;
    new (ptr) ::ashoka::hardware::TtyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::TtyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TtyResponse_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TtyResponse_hardware_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_VideoRequest_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_VideoRequest_default_instance_;
    new (ptr) ::ashoka::hardware::VideoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::VideoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoRequest_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VideoRequest_hardware_2eproto}, {
      &scc_info_VideoRequest_File_hardware_2eproto.base,
      &scc_info_VideoRequest_Stream_hardware_2eproto.base,}};

static void InitDefaultsscc_info_VideoRequest_File_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_VideoRequest_File_default_instance_;
    new (ptr) ::ashoka::hardware::VideoRequest_File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::VideoRequest_File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRequest_File_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoRequest_File_hardware_2eproto}, {}};

static void InitDefaultsscc_info_VideoRequest_Stream_hardware_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ashoka::hardware::_VideoRequest_Stream_default_instance_;
    new (ptr) ::ashoka::hardware::VideoRequest_Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ashoka::hardware::VideoRequest_Stream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoRequest_Stream_hardware_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoRequest_Stream_hardware_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hardware_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hardware_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hardware_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hardware_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Request, id_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Request, token_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, tty_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, led_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, sms_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, audio_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, video_),
  offsetof(::ashoka::hardware::RequestDefaultTypeInternal, tts_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Request, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Response, ok_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Response, timestamp_),
  offsetof(::ashoka::hardware::ResponseDefaultTypeInternal, empty_),
  offsetof(::ashoka::hardware::ResponseDefaultTypeInternal, reason_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Response, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Publisher, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Publisher, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Publisher, timestamp_),
  offsetof(::ashoka::hardware::PublisherDefaultTypeInternal, tty_),
  offsetof(::ashoka::hardware::PublisherDefaultTypeInternal, sms_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::Publisher, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtyRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtyResponse, message_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtyResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsRequest, phones_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsRequest, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsResponse, phone_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::SmsResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::LedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::LedRequest, on_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::LedRequest, off_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::LedRequest, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtsRequest, interval_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtsRequest, times_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtsRequest, message_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::TtsRequest, locale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_Stream, order_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_Stream, type_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_Stream, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_File, order_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest_File, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest, interval_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest, times_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest, files_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::AudioRequest, streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_Stream, order_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_Stream, type_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_Stream, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_File, order_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest_File, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest, interval_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest, times_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest, files_),
  PROTOBUF_FIELD_OFFSET(::ashoka::hardware::VideoRequest, streams_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ashoka::hardware::Request)},
  { 14, -1, sizeof(::ashoka::hardware::Response)},
  { 24, -1, sizeof(::ashoka::hardware::Publisher)},
  { 33, -1, sizeof(::ashoka::hardware::TtyRequest)},
  { 39, -1, sizeof(::ashoka::hardware::TtyResponse)},
  { 46, -1, sizeof(::ashoka::hardware::SmsRequest)},
  { 53, -1, sizeof(::ashoka::hardware::SmsResponse)},
  { 60, -1, sizeof(::ashoka::hardware::LedRequest)},
  { 68, -1, sizeof(::ashoka::hardware::TtsRequest)},
  { 77, -1, sizeof(::ashoka::hardware::AudioRequest_Stream)},
  { 85, -1, sizeof(::ashoka::hardware::AudioRequest_File)},
  { 92, -1, sizeof(::ashoka::hardware::AudioRequest)},
  { 101, -1, sizeof(::ashoka::hardware::VideoRequest_Stream)},
  { 109, -1, sizeof(::ashoka::hardware::VideoRequest_File)},
  { 116, -1, sizeof(::ashoka::hardware::VideoRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_Publisher_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_TtyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_TtyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_SmsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_SmsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_LedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_TtsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_AudioRequest_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_AudioRequest_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_AudioRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_VideoRequest_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_VideoRequest_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ashoka::hardware::_VideoRequest_default_instance_),
};

const char descriptor_table_protodef_hardware_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016hardware.proto\022\017ashoka.hardware\032\033googl"
  "e/protobuf/empty.proto\032\037google/protobuf/"
  "timestamp.proto\"\277\002\n\007Request\022\n\n\002id\030\001 \001(\t\022"
  "\r\n\005token\030\002 \001(\t\022*\n\003tty\030\003 \001(\0132\033.ashoka.har"
  "dware.TtyRequestH\000\022*\n\003led\030\004 \001(\0132\033.ashoka"
  ".hardware.LedRequestH\000\022*\n\003sms\030\005 \001(\0132\033.as"
  "hoka.hardware.SmsRequestH\000\022.\n\005audio\030\006 \001("
  "\0132\035.ashoka.hardware.AudioRequestH\000\022.\n\005vi"
  "deo\030\007 \001(\0132\035.ashoka.hardware.VideoRequest"
  "H\000\022*\n\003tts\030\010 \001(\0132\033.ashoka.hardware.TtsReq"
  "uestH\000B\t\n\007payload\"\213\001\n\010Response\022\n\n\002ok\030\001 \001"
  "(\010\022-\n\ttimestamp\030\002 \001(\0132\032.google.protobuf."
  "Timestamp\022\'\n\005empty\030\003 \001(\0132\026.google.protob"
  "uf.EmptyH\000\022\020\n\006reason\030\004 \001(\tH\000B\t\n\007payload\""
  "\237\001\n\tPublisher\022-\n\ttimestamp\030\001 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022+\n\003tty\030\002 \001(\0132\034.asho"
  "ka.hardware.TtyResponseH\000\022+\n\003sms\030\003 \001(\0132\034"
  ".ashoka.hardware.SmsResponseH\000B\t\n\007payloa"
  "d\"\035\n\nTtyRequest\022\017\n\007command\030\001 \001(\t\"M\n\013TtyR"
  "esponse\022\017\n\007message\030\001 \001(\t\022-\n\ttimestamp\030\002 "
  "\001(\0132\032.google.protobuf.Timestamp\".\n\nSmsRe"
  "quest\022\016\n\006phones\030\001 \003(\t\022\020\n\010messages\030\002 \003(\t\""
  "-\n\013SmsResponse\022\r\n\005phone\030\001 \001(\t\022\017\n\007message"
  "\030\002 \001(\t\"4\n\nLedRequest\022\n\n\002on\030\001 \001(\r\022\013\n\003off\030"
  "\002 \001(\r\022\r\n\005times\030\003 \001(\004\"\226\001\n\nTtsRequest\022\020\n\010i"
  "nterval\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\022\017\n\007message\030"
  "\003 \001(\t\0222\n\006locale\030\004 \001(\0162\".ashoka.hardware."
  "TtsRequest.Locale\"\"\n\006Locale\022\013\n\007English\020\000"
  "\022\013\n\007Chinese\020\001\"\264\002\n\014AudioRequest\022\020\n\010interv"
  "al\030\001 \001(\r\022\r\n\005times\030\002 \001(\r\0221\n\005files\030\003 \003(\0132\""
  ".ashoka.hardware.AudioRequest.File\0225\n\007st"
  "reams\030\004 \003(\0132$.ashoka.hardware.AudioReque"
  "st.Stream\032Z\n\006Stream\022\r\n\005order\030\001 \001(\005\0220\n\004ty"
  "pe\030\002 \001(\0162\".ashoka.hardware.AudioRequest."
  "Type\022\017\n\007payload\030\003 \001(\014\032#\n\004File\022\r\n\005order\030\001"
  " \001(\005\022\014\n\004path\030\002 \001(\t\"\030\n\004Type\022\007\n\003WAV\020\000\022\007\n\003M"
  "P3\020\001\"\253\002\n\014VideoRequest\022\020\n\010interval\030\001 \001(\r\022"
  "\r\n\005times\030\002 \001(\r\0221\n\005files\030\003 \003(\0132\".ashoka.h"
  "ardware.VideoRequest.File\0225\n\007streams\030\004 \003"
  "(\0132$.ashoka.hardware.VideoRequest.Stream"
  "\032Z\n\006Stream\022\r\n\005order\030\001 \001(\005\0220\n\004type\030\002 \001(\0162"
  "\".ashoka.hardware.VideoRequest.Type\022\017\n\007p"
  "ayload\030\003 \001(\014\032#\n\004File\022\r\n\005order\030\001 \001(\005\022\014\n\004p"
  "ath\030\002 \001(\t\"\017\n\004Type\022\007\n\003MP4\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hardware_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hardware_2eproto_sccs[15] = {
  &scc_info_AudioRequest_hardware_2eproto.base,
  &scc_info_AudioRequest_File_hardware_2eproto.base,
  &scc_info_AudioRequest_Stream_hardware_2eproto.base,
  &scc_info_LedRequest_hardware_2eproto.base,
  &scc_info_Publisher_hardware_2eproto.base,
  &scc_info_Request_hardware_2eproto.base,
  &scc_info_Response_hardware_2eproto.base,
  &scc_info_SmsRequest_hardware_2eproto.base,
  &scc_info_SmsResponse_hardware_2eproto.base,
  &scc_info_TtsRequest_hardware_2eproto.base,
  &scc_info_TtyRequest_hardware_2eproto.base,
  &scc_info_TtyResponse_hardware_2eproto.base,
  &scc_info_VideoRequest_hardware_2eproto.base,
  &scc_info_VideoRequest_File_hardware_2eproto.base,
  &scc_info_VideoRequest_Stream_hardware_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hardware_2eproto_once;
static bool descriptor_table_hardware_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hardware_2eproto = {
  &descriptor_table_hardware_2eproto_initialized, descriptor_table_protodef_hardware_2eproto, "hardware.proto", 1754,
  &descriptor_table_hardware_2eproto_once, descriptor_table_hardware_2eproto_sccs, descriptor_table_hardware_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_hardware_2eproto::offsets,
  file_level_metadata_hardware_2eproto, 15, file_level_enum_descriptors_hardware_2eproto, file_level_service_descriptors_hardware_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hardware_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hardware_2eproto), true);
namespace ashoka {
namespace hardware {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TtsRequest_Locale_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hardware_2eproto);
  return file_level_enum_descriptors_hardware_2eproto[0];
}
bool TtsRequest_Locale_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TtsRequest_Locale TtsRequest::English;
constexpr TtsRequest_Locale TtsRequest::Chinese;
constexpr TtsRequest_Locale TtsRequest::Locale_MIN;
constexpr TtsRequest_Locale TtsRequest::Locale_MAX;
constexpr int TtsRequest::Locale_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hardware_2eproto);
  return file_level_enum_descriptors_hardware_2eproto[1];
}
bool AudioRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioRequest_Type AudioRequest::WAV;
constexpr AudioRequest_Type AudioRequest::MP3;
constexpr AudioRequest_Type AudioRequest::Type_MIN;
constexpr AudioRequest_Type AudioRequest::Type_MAX;
constexpr int AudioRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hardware_2eproto);
  return file_level_enum_descriptors_hardware_2eproto[2];
}
bool VideoRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoRequest_Type VideoRequest::MP4;
constexpr VideoRequest_Type VideoRequest::Type_MIN;
constexpr VideoRequest_Type VideoRequest::Type_MAX;
constexpr int VideoRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Request::InitAsDefaultInstance() {
  ::ashoka::hardware::_Request_default_instance_.tty_ = const_cast< ::ashoka::hardware::TtyRequest*>(
      ::ashoka::hardware::TtyRequest::internal_default_instance());
  ::ashoka::hardware::_Request_default_instance_.led_ = const_cast< ::ashoka::hardware::LedRequest*>(
      ::ashoka::hardware::LedRequest::internal_default_instance());
  ::ashoka::hardware::_Request_default_instance_.sms_ = const_cast< ::ashoka::hardware::SmsRequest*>(
      ::ashoka::hardware::SmsRequest::internal_default_instance());
  ::ashoka::hardware::_Request_default_instance_.audio_ = const_cast< ::ashoka::hardware::AudioRequest*>(
      ::ashoka::hardware::AudioRequest::internal_default_instance());
  ::ashoka::hardware::_Request_default_instance_.video_ = const_cast< ::ashoka::hardware::VideoRequest*>(
      ::ashoka::hardware::VideoRequest::internal_default_instance());
  ::ashoka::hardware::_Request_default_instance_.tts_ = const_cast< ::ashoka::hardware::TtsRequest*>(
      ::ashoka::hardware::TtsRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::ashoka::hardware::TtyRequest& tty(const Request* msg);
  static const ::ashoka::hardware::LedRequest& led(const Request* msg);
  static const ::ashoka::hardware::SmsRequest& sms(const Request* msg);
  static const ::ashoka::hardware::AudioRequest& audio(const Request* msg);
  static const ::ashoka::hardware::VideoRequest& video(const Request* msg);
  static const ::ashoka::hardware::TtsRequest& tts(const Request* msg);
};

const ::ashoka::hardware::TtyRequest&
Request::_Internal::tty(const Request* msg) {
  return *msg->payload_.tty_;
}
const ::ashoka::hardware::LedRequest&
Request::_Internal::led(const Request* msg) {
  return *msg->payload_.led_;
}
const ::ashoka::hardware::SmsRequest&
Request::_Internal::sms(const Request* msg) {
  return *msg->payload_.sms_;
}
const ::ashoka::hardware::AudioRequest&
Request::_Internal::audio(const Request* msg) {
  return *msg->payload_.audio_;
}
const ::ashoka::hardware::VideoRequest&
Request::_Internal::video(const Request* msg) {
  return *msg->payload_.video_;
}
const ::ashoka::hardware::TtsRequest&
Request::_Internal::tts(const Request* msg) {
  return *msg->payload_.tts_;
}
void Request::set_allocated_tty(::ashoka::hardware::TtyRequest* tty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tty, submessage_arena);
    }
    set_has_tty();
    payload_.tty_ = tty;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.tty)
}
void Request::set_allocated_led(::ashoka::hardware::LedRequest* led) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (led) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      led = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, led, submessage_arena);
    }
    set_has_led();
    payload_.led_ = led;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.led)
}
void Request::set_allocated_sms(::ashoka::hardware::SmsRequest* sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    set_has_sms();
    payload_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.sms)
}
void Request::set_allocated_audio(::ashoka::hardware::AudioRequest* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    payload_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.audio)
}
void Request::set_allocated_video(::ashoka::hardware::VideoRequest* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    payload_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.video)
}
void Request::set_allocated_tts(::ashoka::hardware::TtsRequest* tts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts, submessage_arena);
    }
    set_has_tts();
    payload_.tts_ = tts;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Request.tts)
}
Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kTty: {
      _internal_mutable_tty()->::ashoka::hardware::TtyRequest::MergeFrom(from._internal_tty());
      break;
    }
    case kLed: {
      _internal_mutable_led()->::ashoka::hardware::LedRequest::MergeFrom(from._internal_led());
      break;
    }
    case kSms: {
      _internal_mutable_sms()->::ashoka::hardware::SmsRequest::MergeFrom(from._internal_sms());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::ashoka::hardware::AudioRequest::MergeFrom(from._internal_audio());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::ashoka::hardware::VideoRequest::MergeFrom(from._internal_video());
      break;
    }
    case kTts: {
      _internal_mutable_tts()->::ashoka::hardware::TtsRequest::MergeFrom(from._internal_tts());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_hardware_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_hardware_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ashoka.hardware.Request)
  switch (payload_case()) {
    case kTty: {
      delete payload_.tty_;
      break;
    }
    case kLed: {
      delete payload_.led_;
      break;
    }
    case kSms: {
      delete payload_.sms_;
      break;
    }
    case kAudio: {
      delete payload_.audio_;
      break;
    }
    case kVideo: {
      delete payload_.video_;
      break;
    }
    case kTts: {
      delete payload_.tts_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_payload();
  _internal_metadata_.Clear();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.Request.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.Request.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.TtyRequest tty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.LedRequest led = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_led(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.SmsRequest sms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.AudioRequest audio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.VideoRequest video = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.TtsRequest tts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.Request.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.Request.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // .ashoka.hardware.TtyRequest tty = 3;
  if (_internal_has_tty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tty(this), target, stream);
  }

  // .ashoka.hardware.LedRequest led = 4;
  if (_internal_has_led()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::led(this), target, stream);
  }

  // .ashoka.hardware.SmsRequest sms = 5;
  if (_internal_has_sms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sms(this), target, stream);
  }

  // .ashoka.hardware.AudioRequest audio = 6;
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio(this), target, stream);
  }

  // .ashoka.hardware.VideoRequest video = 7;
  if (_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::video(this), target, stream);
  }

  // .ashoka.hardware.TtsRequest tts = 8;
  if (_internal_has_tts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  switch (payload_case()) {
    // .ashoka.hardware.TtyRequest tty = 3;
    case kTty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.tty_);
      break;
    }
    // .ashoka.hardware.LedRequest led = 4;
    case kLed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.led_);
      break;
    }
    // .ashoka.hardware.SmsRequest sms = 5;
    case kSms: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_);
      break;
    }
    // .ashoka.hardware.AudioRequest audio = 6;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.audio_);
      break;
    }
    // .ashoka.hardware.VideoRequest video = 7;
    case kVideo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.video_);
      break;
    }
    // .ashoka.hardware.TtsRequest tts = 8;
    case kTts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.tts_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  switch (from.payload_case()) {
    case kTty: {
      _internal_mutable_tty()->::ashoka::hardware::TtyRequest::MergeFrom(from._internal_tty());
      break;
    }
    case kLed: {
      _internal_mutable_led()->::ashoka::hardware::LedRequest::MergeFrom(from._internal_led());
      break;
    }
    case kSms: {
      _internal_mutable_sms()->::ashoka::hardware::SmsRequest::MergeFrom(from._internal_sms());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::ashoka::hardware::AudioRequest::MergeFrom(from._internal_audio());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::ashoka::hardware::VideoRequest::MergeFrom(from._internal_video());
      break;
    }
    case kTts: {
      _internal_mutable_tts()->::ashoka::hardware::TtsRequest::MergeFrom(from._internal_tts());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::ashoka::hardware::_Response_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::ashoka::hardware::_Response_default_instance_.empty_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::ashoka::hardware::_Response_default_instance_.reason_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Response::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Response* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& empty(const Response* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Response::_Internal::timestamp(const Response* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
Response::_Internal::empty(const Response* msg) {
  return *msg->payload_.empty_;
}
void Response::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Response::set_allocated_empty(PROTOBUF_NAMESPACE_ID::Empty* empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty)->GetArena();
    if (message_arena != submessage_arena) {
      empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty, submessage_arena);
    }
    set_has_empty();
    payload_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Response.empty)
}
void Response::clear_empty() {
  if (_internal_has_empty()) {
    delete payload_.empty_;
    clear_has_payload();
  }
}
Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ok_ = from.ok_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kEmpty: {
      _internal_mutable_empty()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_empty());
      break;
    }
    case kReason: {
      _internal_set_reason(from._internal_reason());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_hardware_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ok_));
  clear_has_payload();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (has_payload()) {
    clear_payload();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_hardware_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ashoka.hardware.Response)
  switch (payload_case()) {
    case kEmpty: {
      delete payload_.empty_;
      break;
    }
    case kReason: {
      payload_.reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ok_ = false;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty empty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.Response.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // .google.protobuf.Empty empty = 3;
  if (_internal_has_empty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::empty(this), target, stream);
  }

  // string reason = 4;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.Response.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // .google.protobuf.Empty empty = 3;
    case kEmpty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.empty_);
      break;
    }
    // string reason = 4;
    case kReason: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  switch (from.payload_case()) {
    case kEmpty: {
      _internal_mutable_empty()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_empty());
      break;
    }
    case kReason: {
      _internal_set_reason(from._internal_reason());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(ok_, other->ok_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Publisher::InitAsDefaultInstance() {
  ::ashoka::hardware::_Publisher_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::ashoka::hardware::_Publisher_default_instance_.tty_ = const_cast< ::ashoka::hardware::TtyResponse*>(
      ::ashoka::hardware::TtyResponse::internal_default_instance());
  ::ashoka::hardware::_Publisher_default_instance_.sms_ = const_cast< ::ashoka::hardware::SmsResponse*>(
      ::ashoka::hardware::SmsResponse::internal_default_instance());
}
class Publisher::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Publisher* msg);
  static const ::ashoka::hardware::TtyResponse& tty(const Publisher* msg);
  static const ::ashoka::hardware::SmsResponse& sms(const Publisher* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Publisher::_Internal::timestamp(const Publisher* msg) {
  return *msg->timestamp_;
}
const ::ashoka::hardware::TtyResponse&
Publisher::_Internal::tty(const Publisher* msg) {
  return *msg->payload_.tty_;
}
const ::ashoka::hardware::SmsResponse&
Publisher::_Internal::sms(const Publisher* msg) {
  return *msg->payload_.sms_;
}
void Publisher::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Publisher::set_allocated_tty(::ashoka::hardware::TtyResponse* tty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tty, submessage_arena);
    }
    set_has_tty();
    payload_.tty_ = tty;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Publisher.tty)
}
void Publisher::set_allocated_sms(::ashoka::hardware::SmsResponse* sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    set_has_sms();
    payload_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_set_allocated:ashoka.hardware.Publisher.sms)
}
Publisher::Publisher()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.Publisher)
}
Publisher::Publisher(const Publisher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kTty: {
      _internal_mutable_tty()->::ashoka::hardware::TtyResponse::MergeFrom(from._internal_tty());
      break;
    }
    case kSms: {
      _internal_mutable_sms()->::ashoka::hardware::SmsResponse::MergeFrom(from._internal_sms());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.Publisher)
}

void Publisher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Publisher_hardware_2eproto.base);
  timestamp_ = nullptr;
  clear_has_payload();
}

Publisher::~Publisher() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.Publisher)
  SharedDtor();
}

void Publisher::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (has_payload()) {
    clear_payload();
  }
}

void Publisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Publisher& Publisher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Publisher_hardware_2eproto.base);
  return *internal_default_instance();
}


void Publisher::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:ashoka.hardware.Publisher)
  switch (payload_case()) {
    case kTty: {
      delete payload_.tty_;
      break;
    }
    case kSms: {
      delete payload_.sms_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Publisher::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.Publisher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* Publisher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.TtyResponse tty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.SmsResponse sms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Publisher::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.Publisher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .ashoka.hardware.TtyResponse tty = 2;
  if (_internal_has_tty()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tty(this), target, stream);
  }

  // .ashoka.hardware.SmsResponse sms = 3;
  if (_internal_has_sms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.Publisher)
  return target;
}

size_t Publisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.Publisher)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (payload_case()) {
    // .ashoka.hardware.TtyResponse tty = 2;
    case kTty: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.tty_);
      break;
    }
    // .ashoka.hardware.SmsResponse sms = 3;
    case kSms: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Publisher::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.Publisher)
  GOOGLE_DCHECK_NE(&from, this);
  const Publisher* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Publisher>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.Publisher)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.Publisher)
    MergeFrom(*source);
  }
}

void Publisher::MergeFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.Publisher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.payload_case()) {
    case kTty: {
      _internal_mutable_tty()->::ashoka::hardware::TtyResponse::MergeFrom(from._internal_tty());
      break;
    }
    case kSms: {
      _internal_mutable_sms()->::ashoka::hardware::SmsResponse::MergeFrom(from._internal_sms());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Publisher::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publisher::CopyFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publisher::IsInitialized() const {
  return true;
}

void Publisher::InternalSwap(Publisher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Publisher::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TtyRequest::InitAsDefaultInstance() {
}
class TtyRequest::_Internal {
 public:
};

TtyRequest::TtyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.TtyRequest)
}
TtyRequest::TtyRequest(const TtyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.TtyRequest)
}

void TtyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TtyRequest_hardware_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TtyRequest::~TtyRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.TtyRequest)
  SharedDtor();
}

void TtyRequest::SharedDtor() {
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TtyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TtyRequest& TtyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TtyRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void TtyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.TtyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TtyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.TtyRequest.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TtyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.TtyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.TtyRequest.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.TtyRequest)
  return target;
}

size_t TtyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.TtyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TtyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.TtyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TtyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TtyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.TtyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.TtyRequest)
    MergeFrom(*source);
  }
}

void TtyRequest::MergeFrom(const TtyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.TtyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
}

void TtyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.TtyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtyRequest::CopyFrom(const TtyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.TtyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtyRequest::IsInitialized() const {
  return true;
}

void TtyRequest::InternalSwap(TtyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TtyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TtyResponse::InitAsDefaultInstance() {
  ::ashoka::hardware::_TtyResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TtyResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const TtyResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TtyResponse::_Internal::timestamp(const TtyResponse* msg) {
  return *msg->timestamp_;
}
void TtyResponse::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
TtyResponse::TtyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.TtyResponse)
}
TtyResponse::TtyResponse(const TtyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.TtyResponse)
}

void TtyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TtyResponse_hardware_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

TtyResponse::~TtyResponse() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.TtyResponse)
  SharedDtor();
}

void TtyResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void TtyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TtyResponse& TtyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TtyResponse_hardware_2eproto.base);
  return *internal_default_instance();
}


void TtyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.TtyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TtyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.TtyResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TtyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.TtyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.TtyResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.TtyResponse)
  return target;
}

size_t TtyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.TtyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TtyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.TtyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TtyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TtyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.TtyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.TtyResponse)
    MergeFrom(*source);
  }
}

void TtyResponse::MergeFrom(const TtyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.TtyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void TtyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.TtyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtyResponse::CopyFrom(const TtyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.TtyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtyResponse::IsInitialized() const {
  return true;
}

void TtyResponse::InternalSwap(TtyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TtyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmsRequest::InitAsDefaultInstance() {
}
class SmsRequest::_Internal {
 public:
};

SmsRequest::SmsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.SmsRequest)
}
SmsRequest::SmsRequest(const SmsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      phones_(from.phones_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.SmsRequest)
}

void SmsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmsRequest_hardware_2eproto.base);
}

SmsRequest::~SmsRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.SmsRequest)
  SharedDtor();
}

void SmsRequest::SharedDtor() {
}

void SmsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmsRequest& SmsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmsRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void SmsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.SmsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phones_.Clear();
  messages_.Clear();
  _internal_metadata_.Clear();
}

const char* SmsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string phones = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_phones();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.SmsRequest.phones"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.SmsRequest.messages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.SmsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phones = 1;
  for (int i = 0, n = this->_internal_phones_size(); i < n; i++) {
    const auto& s = this->_internal_phones(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.SmsRequest.phones");
    target = stream->WriteString(1, s, target);
  }

  // repeated string messages = 2;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.SmsRequest.messages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.SmsRequest)
  return target;
}

size_t SmsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.SmsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string phones = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(phones_.size());
  for (int i = 0, n = phones_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      phones_.Get(i));
  }

  // repeated string messages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messages_.size());
  for (int i = 0, n = messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      messages_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.SmsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SmsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.SmsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.SmsRequest)
    MergeFrom(*source);
  }
}

void SmsRequest::MergeFrom(const SmsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.SmsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phones_.MergeFrom(from.phones_);
  messages_.MergeFrom(from.messages_);
}

void SmsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.SmsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsRequest::CopyFrom(const SmsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.SmsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsRequest::IsInitialized() const {
  return true;
}

void SmsRequest::InternalSwap(SmsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phones_.InternalSwap(&other->phones_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmsResponse::InitAsDefaultInstance() {
}
class SmsResponse::_Internal {
 public:
};

SmsResponse::SmsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.SmsResponse)
}
SmsResponse::SmsResponse(const SmsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.SmsResponse)
}

void SmsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmsResponse_hardware_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SmsResponse::~SmsResponse() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.SmsResponse)
  SharedDtor();
}

void SmsResponse::SharedDtor() {
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmsResponse& SmsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmsResponse_hardware_2eproto.base);
  return *internal_default_instance();
}


void SmsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.SmsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SmsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string phone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.SmsResponse.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.SmsResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.SmsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.SmsResponse.phone");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phone(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.SmsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.SmsResponse)
  return target;
}

size_t SmsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.SmsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.SmsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SmsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.SmsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.SmsResponse)
    MergeFrom(*source);
  }
}

void SmsResponse::MergeFrom(const SmsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.SmsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SmsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.SmsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsResponse::CopyFrom(const SmsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.SmsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsResponse::IsInitialized() const {
  return true;
}

void SmsResponse::InternalSwap(SmsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SmsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LedRequest::InitAsDefaultInstance() {
}
class LedRequest::_Internal {
 public:
};

LedRequest::LedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.LedRequest)
}
LedRequest::LedRequest(const LedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&on_, &from.on_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&on_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.LedRequest)
}

void LedRequest::SharedCtor() {
  ::memset(&on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&on_)) + sizeof(times_));
}

LedRequest::~LedRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.LedRequest)
  SharedDtor();
}

void LedRequest::SharedDtor() {
}

void LedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedRequest& LedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void LedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.LedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&on_)) + sizeof(times_));
  _internal_metadata_.Clear();
}

const char* LedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 off = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.LedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 on = 1;
  if (this->on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_on(), target);
  }

  // uint32 off = 2;
  if (this->off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_off(), target);
  }

  // uint64 times = 3;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.LedRequest)
  return target;
}

size_t LedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.LedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 on = 1;
  if (this->on() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_on());
  }

  // uint32 off = 2;
  if (this->off() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_off());
  }

  // uint64 times = 3;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.LedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.LedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.LedRequest)
    MergeFrom(*source);
  }
}

void LedRequest::MergeFrom(const LedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.LedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on() != 0) {
    _internal_set_on(from._internal_on());
  }
  if (from.off() != 0) {
    _internal_set_off(from._internal_off());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void LedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.LedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedRequest::CopyFrom(const LedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.LedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedRequest::IsInitialized() const {
  return true;
}

void LedRequest::InternalSwap(LedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_, other->on_);
  swap(off_, other->off_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TtsRequest::InitAsDefaultInstance() {
}
class TtsRequest::_Internal {
 public:
};

TtsRequest::TtsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.TtsRequest)
}
TtsRequest::TtsRequest(const TtsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&locale_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(locale_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.TtsRequest)
}

void TtsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TtsRequest_hardware_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locale_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(locale_));
}

TtsRequest::~TtsRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.TtsRequest)
  SharedDtor();
}

void TtsRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TtsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TtsRequest& TtsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TtsRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void TtsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.TtsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locale_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(locale_));
  _internal_metadata_.Clear();
}

const char* TtsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.TtsRequest.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.TtsRequest.Locale locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_locale(static_cast<::ashoka::hardware::TtsRequest_Locale>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TtsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.TtsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval = 1;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interval(), target);
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.TtsRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .ashoka.hardware.TtsRequest.Locale locale = 4;
  if (this->locale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.TtsRequest)
  return target;
}

size_t TtsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.TtsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interval());
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_times());
  }

  // .ashoka.hardware.TtsRequest.Locale locale = 4;
  if (this->locale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TtsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.TtsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TtsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TtsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.TtsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.TtsRequest)
    MergeFrom(*source);
  }
}

void TtsRequest::MergeFrom(const TtsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.TtsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.locale() != 0) {
    _internal_set_locale(from._internal_locale());
  }
}

void TtsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.TtsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TtsRequest::CopyFrom(const TtsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.TtsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtsRequest::IsInitialized() const {
  return true;
}

void TtsRequest::InternalSwap(TtsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
  swap(times_, other->times_);
  swap(locale_, other->locale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TtsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioRequest_Stream::InitAsDefaultInstance() {
}
class AudioRequest_Stream::_Internal {
 public:
};

AudioRequest_Stream::AudioRequest_Stream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.AudioRequest.Stream)
}
AudioRequest_Stream::AudioRequest_Stream(const AudioRequest_Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&order_, &from.order_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&order_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.AudioRequest.Stream)
}

void AudioRequest_Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioRequest_Stream_hardware_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&order_)) + sizeof(type_));
}

AudioRequest_Stream::~AudioRequest_Stream() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.AudioRequest.Stream)
  SharedDtor();
}

void AudioRequest_Stream::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioRequest_Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioRequest_Stream& AudioRequest_Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioRequest_Stream_hardware_2eproto.base);
  return *internal_default_instance();
}


void AudioRequest_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.AudioRequest.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&order_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* AudioRequest_Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.AudioRequest.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ashoka::hardware::AudioRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioRequest_Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.AudioRequest.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  // .ashoka.hardware.AudioRequest.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.AudioRequest.Stream)
  return target;
}

size_t AudioRequest_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.AudioRequest.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  // .ashoka.hardware.AudioRequest.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRequest_Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.AudioRequest.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioRequest_Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioRequest_Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.AudioRequest.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.AudioRequest.Stream)
    MergeFrom(*source);
  }
}

void AudioRequest_Stream::MergeFrom(const AudioRequest_Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.AudioRequest.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AudioRequest_Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.AudioRequest.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioRequest_Stream::CopyFrom(const AudioRequest_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.AudioRequest.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequest_Stream::IsInitialized() const {
  return true;
}

void AudioRequest_Stream::InternalSwap(AudioRequest_Stream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioRequest_Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioRequest_File::InitAsDefaultInstance() {
}
class AudioRequest_File::_Internal {
 public:
};

AudioRequest_File::AudioRequest_File()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.AudioRequest.File)
}
AudioRequest_File::AudioRequest_File(const AudioRequest_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.AudioRequest.File)
}

void AudioRequest_File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioRequest_File_hardware_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

AudioRequest_File::~AudioRequest_File() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.AudioRequest.File)
  SharedDtor();
}

void AudioRequest_File::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioRequest_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioRequest_File& AudioRequest_File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioRequest_File_hardware_2eproto.base);
  return *internal_default_instance();
}


void AudioRequest_File::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.AudioRequest.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
  _internal_metadata_.Clear();
}

const char* AudioRequest_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.AudioRequest.File.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioRequest_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.AudioRequest.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.AudioRequest.File.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.AudioRequest.File)
  return target;
}

size_t AudioRequest_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.AudioRequest.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRequest_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.AudioRequest.File)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioRequest_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioRequest_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.AudioRequest.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.AudioRequest.File)
    MergeFrom(*source);
  }
}

void AudioRequest_File::MergeFrom(const AudioRequest_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.AudioRequest.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
}

void AudioRequest_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.AudioRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioRequest_File::CopyFrom(const AudioRequest_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.AudioRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequest_File::IsInitialized() const {
  return true;
}

void AudioRequest_File::InternalSwap(AudioRequest_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioRequest_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioRequest::InitAsDefaultInstance() {
}
class AudioRequest::_Internal {
 public:
};

AudioRequest::AudioRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.AudioRequest)
}
AudioRequest::AudioRequest(const AudioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.AudioRequest)
}

void AudioRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioRequest_hardware_2eproto.base);
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(times_));
}

AudioRequest::~AudioRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.AudioRequest)
  SharedDtor();
}

void AudioRequest::SharedDtor() {
}

void AudioRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioRequest& AudioRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void AudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.AudioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  streams_.Clear();
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(times_));
  _internal_metadata_.Clear();
}

const char* AudioRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ashoka.hardware.AudioRequest.File files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ashoka.hardware.AudioRequest.Stream streams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.AudioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval = 1;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interval(), target);
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times(), target);
  }

  // repeated .ashoka.hardware.AudioRequest.File files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_files(i), target, stream);
  }

  // repeated .ashoka.hardware.AudioRequest.Stream streams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.AudioRequest)
  return target;
}

size_t AudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.AudioRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ashoka.hardware.AudioRequest.File files = 3;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ashoka.hardware.AudioRequest.Stream streams = 4;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interval());
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.AudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.AudioRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.AudioRequest)
    MergeFrom(*source);
  }
}

void AudioRequest::MergeFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.AudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  streams_.MergeFrom(from.streams_);
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void AudioRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioRequest::CopyFrom(const AudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.AudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioRequest::IsInitialized() const {
  return true;
}

void AudioRequest::InternalSwap(AudioRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  streams_.InternalSwap(&other->streams_);
  swap(interval_, other->interval_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoRequest_Stream::InitAsDefaultInstance() {
}
class VideoRequest_Stream::_Internal {
 public:
};

VideoRequest_Stream::VideoRequest_Stream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.VideoRequest.Stream)
}
VideoRequest_Stream::VideoRequest_Stream(const VideoRequest_Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&order_, &from.order_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&order_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.VideoRequest.Stream)
}

void VideoRequest_Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoRequest_Stream_hardware_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&order_)) + sizeof(type_));
}

VideoRequest_Stream::~VideoRequest_Stream() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.VideoRequest.Stream)
  SharedDtor();
}

void VideoRequest_Stream::SharedDtor() {
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoRequest_Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRequest_Stream& VideoRequest_Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoRequest_Stream_hardware_2eproto.base);
  return *internal_default_instance();
}


void VideoRequest_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.VideoRequest.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&order_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* VideoRequest_Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ashoka.hardware.VideoRequest.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ashoka::hardware::VideoRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoRequest_Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.VideoRequest.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  // .ashoka.hardware.VideoRequest.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.VideoRequest.Stream)
  return target;
}

size_t VideoRequest_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.VideoRequest.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  // .ashoka.hardware.VideoRequest.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRequest_Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.VideoRequest.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRequest_Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoRequest_Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.VideoRequest.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.VideoRequest.Stream)
    MergeFrom(*source);
  }
}

void VideoRequest_Stream::MergeFrom(const VideoRequest_Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.VideoRequest.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void VideoRequest_Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.VideoRequest.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRequest_Stream::CopyFrom(const VideoRequest_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.VideoRequest.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest_Stream::IsInitialized() const {
  return true;
}

void VideoRequest_Stream::InternalSwap(VideoRequest_Stream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRequest_Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoRequest_File::InitAsDefaultInstance() {
}
class VideoRequest_File::_Internal {
 public:
};

VideoRequest_File::VideoRequest_File()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.VideoRequest.File)
}
VideoRequest_File::VideoRequest_File(const VideoRequest_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.VideoRequest.File)
}

void VideoRequest_File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoRequest_File_hardware_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

VideoRequest_File::~VideoRequest_File() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.VideoRequest.File)
  SharedDtor();
}

void VideoRequest_File::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoRequest_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRequest_File& VideoRequest_File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoRequest_File_hardware_2eproto.base);
  return *internal_default_instance();
}


void VideoRequest_File::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.VideoRequest.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
  _internal_metadata_.Clear();
}

const char* VideoRequest_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ashoka.hardware.VideoRequest.File.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoRequest_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.VideoRequest.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ashoka.hardware.VideoRequest.File.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.VideoRequest.File)
  return target;
}

size_t VideoRequest_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.VideoRequest.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRequest_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.VideoRequest.File)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRequest_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoRequest_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.VideoRequest.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.VideoRequest.File)
    MergeFrom(*source);
  }
}

void VideoRequest_File::MergeFrom(const VideoRequest_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.VideoRequest.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
}

void VideoRequest_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.VideoRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRequest_File::CopyFrom(const VideoRequest_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.VideoRequest.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest_File::IsInitialized() const {
  return true;
}

void VideoRequest_File::InternalSwap(VideoRequest_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRequest_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoRequest::InitAsDefaultInstance() {
}
class VideoRequest::_Internal {
 public:
};

VideoRequest::VideoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ashoka.hardware.VideoRequest)
}
VideoRequest::VideoRequest(const VideoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:ashoka.hardware.VideoRequest)
}

void VideoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoRequest_hardware_2eproto.base);
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(times_));
}

VideoRequest::~VideoRequest() {
  // @@protoc_insertion_point(destructor:ashoka.hardware.VideoRequest)
  SharedDtor();
}

void VideoRequest::SharedDtor() {
}

void VideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoRequest& VideoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoRequest_hardware_2eproto.base);
  return *internal_default_instance();
}


void VideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ashoka.hardware.VideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  streams_.Clear();
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(times_));
  _internal_metadata_.Clear();
}

const char* VideoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ashoka.hardware.VideoRequest.File files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ashoka.hardware.VideoRequest.Stream streams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ashoka.hardware.VideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 interval = 1;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interval(), target);
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times(), target);
  }

  // repeated .ashoka.hardware.VideoRequest.File files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_files(i), target, stream);
  }

  // repeated .ashoka.hardware.VideoRequest.Stream streams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ashoka.hardware.VideoRequest)
  return target;
}

size_t VideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ashoka.hardware.VideoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ashoka.hardware.VideoRequest.File files = 3;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ashoka.hardware.VideoRequest.Stream streams = 4;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interval());
  }

  // uint32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ashoka.hardware.VideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ashoka.hardware.VideoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ashoka.hardware.VideoRequest)
    MergeFrom(*source);
  }
}

void VideoRequest::MergeFrom(const VideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ashoka.hardware.VideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  streams_.MergeFrom(from.streams_);
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void VideoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ashoka.hardware.VideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRequest::CopyFrom(const VideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ashoka.hardware.VideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest::IsInitialized() const {
  return true;
}

void VideoRequest::InternalSwap(VideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  streams_.InternalSwap(&other->streams_);
  swap(interval_, other->interval_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hardware
}  // namespace ashoka
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ashoka::hardware::Request* Arena::CreateMaybeMessage< ::ashoka::hardware::Request >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::Response* Arena::CreateMaybeMessage< ::ashoka::hardware::Response >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::Publisher* Arena::CreateMaybeMessage< ::ashoka::hardware::Publisher >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::Publisher >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::TtyRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::TtyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::TtyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::TtyResponse* Arena::CreateMaybeMessage< ::ashoka::hardware::TtyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::TtyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::SmsRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::SmsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::SmsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::SmsResponse* Arena::CreateMaybeMessage< ::ashoka::hardware::SmsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::SmsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::LedRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::LedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::LedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::TtsRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::TtsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::TtsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::AudioRequest_Stream* Arena::CreateMaybeMessage< ::ashoka::hardware::AudioRequest_Stream >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::AudioRequest_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::AudioRequest_File* Arena::CreateMaybeMessage< ::ashoka::hardware::AudioRequest_File >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::AudioRequest_File >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::AudioRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::AudioRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::AudioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::VideoRequest_Stream* Arena::CreateMaybeMessage< ::ashoka::hardware::VideoRequest_Stream >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::VideoRequest_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::VideoRequest_File* Arena::CreateMaybeMessage< ::ashoka::hardware::VideoRequest_File >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::VideoRequest_File >(arena);
}
template<> PROTOBUF_NOINLINE ::ashoka::hardware::VideoRequest* Arena::CreateMaybeMessage< ::ashoka::hardware::VideoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ashoka::hardware::VideoRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
